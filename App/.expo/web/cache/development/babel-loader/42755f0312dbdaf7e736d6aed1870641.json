{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\yonimdo\\\\Documents\\\\Workspace\\\\Yonimdo\\\\Parablas\\\\components\\\\pParallaxSwiper.tsx\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { ParallaxSwiper, ParallaxSwiperPage } from \"react-native-parallax-swiper\";\nimport PHeaderImageScroll from \"./pHeaderImageScroll\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar PParallaxSwiper = function (_React$Component) {\n  _inherits(PParallaxSwiper, _React$Component);\n\n  var _super = _createSuper(PParallaxSwiper);\n\n  function PParallaxSwiper() {\n    var _this;\n\n    _classCallCheck(this, PParallaxSwiper);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.myCustomAnimatedValue = new Animated.Value(0);\n\n    _this.getPageTransformStyle = function (index) {\n      return {\n        transform: [{\n          scale: _this.myCustomAnimatedValue.interpolate({\n            inputRange: [(index - 1) * (width + 8), index * (width + 8), (index + 1) * (width + 8)],\n            outputRange: [0, 1, 0],\n            extrapolate: \"clamp\"\n          })\n        }, {\n          rotate: _this.myCustomAnimatedValue.interpolate({\n            inputRange: [(index - 1) * (width + 8), index * (width + 8), (index + 1) * (width + 8)],\n            outputRange: [\"180deg\", \"0deg\", \"-180deg\"],\n            extrapolate: \"clamp\"\n          })\n        }]\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(PParallaxSwiper, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ParallaxSwiper, {\n        speed: 0.5,\n        animatedValue: this.myCustomAnimatedValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }\n      }, React.createElement(ParallaxSwiperPage, {\n        BackgroundComponent: React.createElement(Text, {\n          style: styles.backgroundImage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 42\n          }\n        }),\n        ForegroundComponent: React.createElement(PHeaderImageScroll, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 42\n          }\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }\n      }), React.createElement(ParallaxSwiperPage, {\n        BackgroundComponent: React.createElement(Text, {\n          style: styles.backgroundImage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 42\n          }\n        }),\n        ForegroundComponent: React.createElement(PHeaderImageScroll, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 42\n          }\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }\n      }), React.createElement(ParallaxSwiperPage, {\n        BackgroundComponent: React.createElement(Text, {\n          style: styles.backgroundImage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 42\n          }\n        }),\n        ForegroundComponent: React.createElement(PHeaderImageScroll, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 42\n          }\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return PParallaxSwiper;\n}(React.Component);\n\nexport { PParallaxSwiper as default };\nvar styles = StyleSheet.create({\n  backgroundImage: {\n    width: width,\n    height: height\n  },\n  foregroundTextContainer: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"transparent\"\n  }\n});","map":{"version":3,"sources":["C:/Users/yonimdo/Documents/Workspace/Yonimdo/Parablas/components/pParallaxSwiper.tsx"],"names":["React","ParallaxSwiper","ParallaxSwiperPage","PHeaderImageScroll","Dimensions","get","width","height","PParallaxSwiper","myCustomAnimatedValue","Animated","Value","getPageTransformStyle","index","transform","scale","interpolate","inputRange","outputRange","extrapolate","rotate","styles","backgroundImage","Component","StyleSheet","create","foregroundTextContainer","flex","alignItems","justifyContent","backgroundColor"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {Animated, Text, View, Image, StyleSheet, Dimensions } from \"react-native\";\r\n\r\nimport {ParallaxSwiper, ParallaxSwiperPage } from \"react-native-parallax-swiper\";\r\nimport PHeaderImageScroll from \"./pHeaderImageScroll\";\r\n\r\nconst { width, height } = Dimensions.get(\"window\");\r\n\r\nexport default class PParallaxSwiper extends React.Component {\r\n    myCustomAnimatedValue = new Animated.Value(0);\r\n\r\n    getPageTransformStyle = (index:any) => ({\r\n        transform: [\r\n            {\r\n                scale: this.myCustomAnimatedValue.interpolate({\r\n                    inputRange: [\r\n                        (index - 1) * (width + 8), // Add 8 for dividerWidth\r\n                        index * (width + 8),\r\n                        (index + 1) * (width + 8)\r\n                    ],\r\n                    outputRange: [0, 1, 0],\r\n                    extrapolate: \"clamp\"\r\n                })\r\n            },\r\n            {\r\n                rotate: this.myCustomAnimatedValue.interpolate({\r\n                    inputRange: [\r\n                        (index - 1) * (width + 8),\r\n                        index * (width + 8),\r\n                        (index + 1) * (width + 8)\r\n                    ],\r\n                    outputRange: [\"180deg\", \"0deg\", \"-180deg\"],\r\n                    extrapolate: \"clamp\"\r\n                })\r\n            }\r\n        ]\r\n    });\r\n\r\n    render() {\r\n        return (\r\n            <ParallaxSwiper\r\n                speed={0.5}\r\n                animatedValue={this.myCustomAnimatedValue}\r\n            // dividerWidth={8}\r\n            // dividerColor=\"black\"\r\n            // backgroundColor=\"black\"\r\n            // onMomentumScrollEnd={activePageIndex => console.log(activePageIndex)}\r\n            >\r\n                <ParallaxSwiperPage\r\n                    BackgroundComponent={<Text style={styles.backgroundImage} ></Text>}\r\n                    ForegroundComponent={<PHeaderImageScroll  ></PHeaderImageScroll>}\r\n                />\r\n                <ParallaxSwiperPage\r\n                    BackgroundComponent={<Text style={styles.backgroundImage} ></Text>}\r\n                    ForegroundComponent={<PHeaderImageScroll  ></PHeaderImageScroll>}\r\n\r\n                />\r\n                <ParallaxSwiperPage\r\n                    BackgroundComponent={<Text style={styles.backgroundImage} ></Text>}\r\n                    ForegroundComponent={<PHeaderImageScroll  ></PHeaderImageScroll>}\r\n                />\r\n            </ParallaxSwiper>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    backgroundImage: {\r\n        width,\r\n        height\r\n    },\r\n    foregroundTextContainer: {\r\n        flex: 1,\r\n\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        backgroundColor: \"transparent\"\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}